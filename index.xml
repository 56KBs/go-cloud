<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go CDK</title>
    <link>https://gocloud.dev/</link>
    <description>Recent content on Go CDK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2018–2019 The Go Cloud Development Kit Authors</copyright>
    <lastBuildDate>Thu, 11 Jul 2019 12:00:00 -0700</lastBuildDate><atom:link href="https://gocloud.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Structuring Portable Code</title>
      <link>https://gocloud.dev/concepts/structure/</link>
      <pubDate>Mon, 03 Jun 2019 07:34:22 -0700</pubDate>
      
      <guid>https://gocloud.dev/concepts/structure/</guid>
      <description>&lt;p&gt;The Go CDK&amp;rsquo;s APIs are intentionally structured to make it easier to separate
your application&amp;rsquo;s core logic from the details of the services it is using.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Publish Messages to a Topic</title>
      <link>https://gocloud.dev/howto/pubsub/publish/</link>
      <pubDate>Tue, 26 Mar 2019 09:44:15 -0700</pubDate>
      
      <guid>https://gocloud.dev/howto/pubsub/publish/</guid>
      <description>&lt;p&gt;Publishing a message to a topic with the Go CDK takes two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#opening&#34;&gt;Open a topic&lt;/a&gt; with the Pub/Sub provider of your choice (once per topic).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sending&#34;&gt;Send messages&lt;/a&gt; on the topic.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Tutorial: Command-Line Uploader</title>
      <link>https://gocloud.dev/tutorials/cli-uploader/</link>
      <pubDate>Tue, 19 Mar 2019 18:45:53 -0700</pubDate>
      
      <guid>https://gocloud.dev/tutorials/cli-uploader/</guid>
      <description>&lt;p&gt;This quickstart will build a command line application called &lt;code&gt;upload&lt;/code&gt; that
uploads files to blob storage on GCP, AWS, and Azure. Blob storage stores binary
data under a string key, and is one of the most frequently used cloud
services.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tutorial: Guestbook Application</title>
      <link>https://gocloud.dev/tutorials/guestbook/</link>
      <pubDate>Wed, 10 Jul 2019 16:58:00 -0700</pubDate>
      
      <guid>https://gocloud.dev/tutorials/guestbook/</guid>
      <description>&lt;p&gt;In this tutorial, we will deploy an existing Go CDK application called Guestbook
locally, then on Google Cloud Platform (GCP), Amazon Web Services (AWS), and
Azure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>URLs</title>
      <link>https://gocloud.dev/concepts/urls/</link>
      <pubDate>Mon, 06 May 2019 09:55:09 -0700</pubDate>
      
      <guid>https://gocloud.dev/concepts/urls/</guid>
      <description>&lt;p&gt;In addition to creating portable types via provider-specific constructors
(e.g., creating a &lt;code&gt;*blob.Bucket&lt;/code&gt; using &lt;a href=&#34;https://godoc.org/gocloud.dev/blob/s3blob#OpenBucket&#34;&gt;&lt;code&gt;s3blob.OpenBucket&lt;/code&gt;&lt;/a&gt;), many portable types
can also be created using a URL. The scheme of the URL specifies the provider,
and each provider implementation has code to convert the URL into the data
needed to call its constructor. For example, calling
&lt;code&gt;blob.OpenBucket(&amp;quot;s3blob://my-bucket&amp;quot;)&lt;/code&gt; will return a &lt;code&gt;*blob.Bucket&lt;/code&gt; created
using &lt;a href=&#34;https://godoc.org/gocloud.dev/blob/s3blob#OpenBucket&#34;&gt;&lt;code&gt;s3blob.OpenBucket&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Subscribe to Messages from a Topic</title>
      <link>https://gocloud.dev/howto/pubsub/subscribe/</link>
      <pubDate>Tue, 26 Mar 2019 09:44:33 -0700</pubDate>
      
      <guid>https://gocloud.dev/howto/pubsub/subscribe/</guid>
      <description>&lt;p&gt;Subscribing to receive message from a topic with the Go CDK takes three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#opening&#34;&gt;Open a subscription&lt;/a&gt; to a topic with the Pub/Sub service of your choice (once per
subscription).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#receiving&#34;&gt;Receive and acknowledge messages&lt;/a&gt; from the topic. After completing any
work related to the message, use the Ack method to prevent it from being
redelivered.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Using provider-specific APIs</title>
      <link>https://gocloud.dev/concepts/as/</link>
      <pubDate>Fri, 10 May 2019 11:17:09 -0700</pubDate>
      
      <guid>https://gocloud.dev/concepts/as/</guid>
      <description>&lt;p&gt;It is not feasible or desirable for APIs like &lt;code&gt;blob.Bucket&lt;/code&gt; to encompass the
full functionality of every provider. Rather, we intend to provide a subset
of the most commonly used functionality. There will be cases where a
developer wants to access provider-specific functionality, such as unexposed
APIs or data fields, errors, or options. This can be accomplished using &lt;code&gt;As&lt;/code&gt;
functions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Order Processor</title>
      <link>https://gocloud.dev/tutorials/order/</link>
      <pubDate>Tue, 09 Jul 2019 10:22:39 -0400</pubDate>
      
      <guid>https://gocloud.dev/tutorials/order/</guid>
      <description>&lt;p&gt;In this tutorial, we will run a Go CDK application called Order Processor
on a local machine.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
